// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: school.sql

package db

import (
	"context"
)

const createSchool = `-- name: CreateSchool :one
insert into school(
    name,
    address,
    type
)values(
    $1,$2,$3
) returning id, name, address, type, created_date
`

type CreateSchoolParams struct {
	Name    string `json:"name"`
	Address string `json:"address"`
	Type    string `json:"type"`
}

func (q *Queries) CreateSchool(ctx context.Context, arg CreateSchoolParams) (School, error) {
	row := q.db.QueryRowContext(ctx, createSchool, arg.Name, arg.Address, arg.Type)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Type,
		&i.CreatedDate,
	)
	return i, err
}

const deleteSchool = `-- name: DeleteSchool :exec
delete from school
where id=$1
`

func (q *Queries) DeleteSchool(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSchool, id)
	return err
}

const getSchool = `-- name: GetSchool :one
select id, name, address, type, created_date from school s
where s.id=$1 limit 1
`

func (q *Queries) GetSchool(ctx context.Context, id int64) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchool, id)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Type,
		&i.CreatedDate,
	)
	return i, err
}

const listSchools = `-- name: ListSchools :many
select id, name, address, type, created_date from school s
order by s.id
limit $1
offset $2
`

type ListSchoolsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSchools(ctx context.Context, arg ListSchoolsParams) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, listSchools, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []School{}
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Type,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchool = `-- name: UpdateSchool :one
update school 
set name=$2,address=$3,type=$4
where id=$1
returning id, name, address, type, created_date
`

type UpdateSchoolParams struct {
	ID      int64  `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
	Type    string `json:"type"`
}

func (q *Queries) UpdateSchool(ctx context.Context, arg UpdateSchoolParams) (School, error) {
	row := q.db.QueryRowContext(ctx, updateSchool,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Type,
	)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Type,
		&i.CreatedDate,
	)
	return i, err
}
