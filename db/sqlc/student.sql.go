// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: student.sql

package db

import (
	"context"
)

const createStudent = `-- name: CreateStudent :one
insert into student(
    name,
    password,
    school_id
)values(
   $1,$2,$3
)returning id, school_id, name, password, created_date
`

type CreateStudentParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
	SchoolID int64  `json:"school_id"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent, arg.Name, arg.Password, arg.SchoolID)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.SchoolID,
		&i.Name,
		&i.Password,
		&i.CreatedDate,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
delete from student
where id=$1
`

func (q *Queries) DeleteStudent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, id)
	return err
}

const getStudent = `-- name: GetStudent :one
select id, school_id, name, password, created_date from student
where id=$1 limit 1
`

func (q *Queries) GetStudent(ctx context.Context, id int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.SchoolID,
		&i.Name,
		&i.Password,
		&i.CreatedDate,
	)
	return i, err
}

const updateStudent = `-- name: UpdateStudent :one
update student
set name=$2,password=$3
where id=$1
returning id, school_id, name, password, created_date
`

type UpdateStudentParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudent, arg.ID, arg.Name, arg.Password)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.SchoolID,
		&i.Name,
		&i.Password,
		&i.CreatedDate,
	)
	return i, err
}
